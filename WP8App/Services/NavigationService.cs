// ------------------------------------------------------------------------
// ========================================================================
// THIS CODE AND INFORMATION ARE GENERATED BY AUTOMATIC CODE GENERATOR
// ========================================================================
// Template:   	NavigationService.tt
// Version:		2.0
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Net;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Navigation;
using Controls = WPAppStudio.Controls;
using IViewModels = WPAppStudio.ViewModel.Interfaces;
using Microsoft.Phone.Controls;
using Microsoft.Phone.Tasks;
using ServicesInterfaces = WPAppStudio.Services.Interfaces;
using ViewModelBase = WPAppStudio.ViewModel.Base;
using Windows.System;

namespace WPAppStudio.Services
{
    /// <summary>
    /// Implementation of a navigation service.
    /// </summary>
    [CompilerGenerated]
    [GeneratedCode("Radarc", "4.0")]
    public class NavigationService : ServicesInterfaces.INavigationService
    {
        private static readonly IDictionary<Type, string> ViewModelRouting = new Dictionary<Type, string>()
        {
            { typeof(IViewModels.IBLOGPOSTS_NewsViewModel), "/View/BLOGPOSTS_News.xaml" },
            { typeof(IViewModels.IBLOGPOSTS_DetailViewModel), "/View/BLOGPOSTS_Detail.xaml" },
			{ typeof(IViewModels.IAboutViewModel), "/View/About.xaml" },
			{ typeof(IViewModels.ILicenseViewModel), "/View/License.xaml" }
        };

        private object _navigationContext;
        /// <summary>
        /// Generic method to navigate to a viewmodel
        /// </summary>
        /// <typeparam name="TDestinationViewModel">ViewModel type</typeparam>
        public void NavigateTo<TDestinationViewModel>()
        {
            var rootFrame = Application.Current.RootVisual as PhoneApplicationFrame;
            rootFrame.Navigate(new Uri(ViewModelRouting[typeof(TDestinationViewModel)], UriKind.Relative));
        }

        /// <summary>
        /// Generic method to navigate to a viewmodel passing a navigation context
        /// </summary>
        /// <typeparam name="TDestinationViewModel">ViewModel type</typeparam>
        /// <param name="navigationContext">Parameters passed to target ViewModel</param>
        public void NavigateTo<TDestinationViewModel>(object navigationContext)
        {
            this._navigationContext = navigationContext;

            var rootFrame = Application.Current.RootVisual as PhoneApplicationFrame;
            rootFrame.Navigated += new NavigatedEventHandler(Page_Navigated);
            rootFrame.Navigate(new Uri(ViewModelRouting[typeof(TDestinationViewModel)], UriKind.Relative));
        }
			
        /// <summary>
        /// Generic method to navigate to a menu item target
        /// </summary>        
        /// <param name="menuItem">Selected menu item</param>			
        public void NavigateTo(Controls.MenuItemData menuItem)
        {
            var rootFrame = Application.Current.RootVisual as PhoneApplicationFrame;
            if(menuItem.Target != null)
                rootFrame.Navigate(new Uri(menuItem.Target, UriKind.Relative));
            else if (menuItem.TargetUrl != null)
				NavigateTo(new Uri(menuItem.TargetUrl));
                
        }
		
		/// <summary>
        /// Generic method to navigate to a uri
        /// </summary>        
        /// <param name="uri">Target uri</param>			
        public async void NavigateTo(Uri uri)
		{
            if (uri != null) await Launcher.LaunchUriAsync(uri);
        }

		/// <summary>
        /// Go back in the navigation stack.
        /// </summary>
        public void NavigateBack()
        {
            var rootFrame = Application.Current.RootVisual as PhoneApplicationFrame;
            if (rootFrame.CanGoBack)
            {
                rootFrame.GoBack();
            }
        }

		/// <summary>
        /// Go back in the navigation stack passing a navigation context.
        /// </summary>
        public void NavigateBack(object navigationContext)
        {
            this._navigationContext = navigationContext;

            var rootFrame = Application.Current.RootVisual as PhoneApplicationFrame;
            if (rootFrame.CanGoBack)
            {
                rootFrame.Navigated += new NavigatedEventHandler(Page_Navigated);
                rootFrame.GoBack();
            }
        }

        private void Page_Navigated(object sender, NavigationEventArgs e)
        {
            var rootFrame = Application.Current.RootVisual as PhoneApplicationFrame;
            rootFrame.Navigated -= Page_Navigated;

            // Parameter to the ViewModel
            ((e.Content as PhoneApplicationPage).DataContext as ViewModelBase.INavigable).NavigationContext = this._navigationContext;
        }

		/// <summary>
        /// Remove all items in navigation stack.
        /// </summary>
        public void ClearNavigationHistory()
        {
            var rootFrame = Application.Current.RootVisual as PhoneApplicationFrame;
            while (rootFrame.RemoveBackEntry() != null) ;
        }
		
		/// <summary>
        /// Get URI view corresponding to a ViewModel 
        /// </summary>
        public string GetUri(Type type)
        {
            return ViewModelRouting[type];
        }
    }
}
